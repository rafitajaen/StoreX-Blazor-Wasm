@page "/store/warehouse"

@attribute [MustHavePermission(FSHAction.View, FSHResource.Suppliers)]

@inject IStringLocalizer<Warehouse> L
@inject IOrdersClient OrdersClient
@inject ISuppliersClient SuppliersClient

<MudGrid>
    <MudItem xs="12" sm="12" Class="d-flex flex-column gap-10">
        <MudText Typo="Typo.body2">@searchSupplierId</MudText>
        <MudText Typo="Typo.body2">@prueba</MudText>
        <FshTitle Class="align-selft-start" Title="@L["Warehouse"]" Description="@L["Manage Suppliers, Orders and Products."]" />

        @if(start)
        {
            <MudContainer Class="d-flex flex-column gap-1 align-self-center align-center justify-center mt-16">
                <MudButton Class="mt-16" OnClick="@OnFindASupplier" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Outlined.AddToPhotos">Find a Supplier</MudButton>
                <MudText  Typo="Typo.overline">or</MudText>
                <MudButton Class="mb-16" Variant="Variant.Text" DisableElevation="true" Color="Color.Primary" OnClick="@OnViewAll">Add a new Supplier</MudButton>
            </MudContainer>
        }
    </MudItem>

    @if(start is not true || viewAll)
    {
        <MudItem xs="12" sm="4" Class="d-flex flex-column gap-2">
            <MudText Typo="Typo.overline">SUPPLIER</MudText>
            <SupplierCard SelectedSupplier="@selectedSupplier" ViewAll=@viewAll Style="my-6 mr-8"/>
            <MudButton Class="align-self-end" OnClick="@OnFindASupplier" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Outlined.AddToPhotos">Find a Supplier</MudButton>
        </MudItem>

        @if(isRefreshed)
        {
            <MudItem xs="12" sm="8">
            <MudText Typo="Typo.overline">ORDERS</MudText>
            <SimpleOrderTable SelectedSupplier="@selectedSupplier" SelectedItem="selectedOrder" SelectedItemChanged="OnSelectedItemChanged"/>
        </MudItem>
        }
        @if(isProductsRefreshed)
        {
            <MudItem xs="12" sm="12">
                <MudText Typo="Typo.overline">PRODUCTS</MudText>
                <SimpleProductsTable SelectedOrder="@selectedOrder"/>
            </MudItem>
        }
    }
</MudGrid>

<MudMessageBox @ref="mbox" Title="Find a Supplier" NoText="View All" YesText="Select Supplier">
    <MessageContent>
        <SupplierAutocomplete @bind-Value="@searchSupplierId"/>
    </MessageContent>
</MudMessageBox>

@code
{
    private OrderDto selectedOrder {get; set;} = new OrderDto {Name="MegaDefault Order"};
    public Guid searchSupplierId { get; set; }
    private SupplierDto selectedSupplier { get; set; } = new SupplierDto {Name="Default Supplier"};
    private bool viewAll {get; set;} = false;
    private bool isRefreshed {get; set;} = false;
    private bool isProductsRefreshed { get; set; } = false;
    private MudMessageBox mbox { get; set; } = default!;
    private bool start { get; set; } = true;

    private string prueba { get; set; } = "Sin asignar";


    private async Task OnFindASupplier()
    {
        bool? result = await mbox.Show();
        if(result is null) prueba="Null";
        else prueba=result!.ToString();


        if(result is not null) isRefreshed=false;

        if(result is not null && result is true)
        {
            if(start)
            {
                if(searchSupplierId != Guid.Empty)
                {
                    start = false;
                    selectedSupplier = await SuppliersClient.GetAsync(searchSupplierId);
                }
            }
            else
            {
                if(searchSupplierId == Guid.Empty)
                {
                    viewAll = true;
                    selectedSupplier = default!;
                }
                else
                {
                    viewAll=false;
                    selectedSupplier = await SuppliersClient.GetAsync(searchSupplierId);
                }
            }
            isRefreshed=true;
            StateHasChanged();
        }
        else if(result is not null && result is not true) OnViewAll();
    }

    private async Task OnSelectedItemChanged(OrderDto item)
    {
	    isProductsRefreshed=false;
        selectedOrder = item ;
        await Task.Delay(50);
        isProductsRefreshed=true;
    }

    private void OnViewAll()
    {
        start=true;
        viewAll=true;
        searchSupplierId = Guid.Empty;
        selectedSupplier = default!;
        start=false;
        isRefreshed=true;
        StateHasChanged();
    }

}