@inject IStringLocalizer<SimpleProductsTable> L
@inject IQuotationProductsClient QuotationProductsClient

<MudContainer Class="d-flex align-start gap-1">

    <MudText Typo="Typo.overline"><strong>PRODUCTS</strong></MudText>
    @if(SelectedQuotation.Id != Guid.Empty)
    {
        <MudText Typo="Typo.overline"><strong>IN QUOTATION: '@SelectedQuotation.Name.ToUpper()'</strong></MudText>
        <MudSpacer />
    }

</MudContainer>

<ProductEntityTable @ref="_table" TEntity="QuotationProductDetailsDto" TId="Guid" TRequest="UpdateQuotationProductRequest" Context="@Context"
    CustomDeleteFunc="@(async (quotationId, productId) => await QuotationProductsClient.DeleteAsync(quotationId, productId))"
    OrderIdFunc="@((qp) => qp.QuotationId)" ProductIdFunc="@((qp) => qp.Product.Id)">

    <EditFormContent>
        <MudItem xs="12" md="12">
            <MudText Typo="Typo.body1">You were editing the quotation :<strong>@SelectedQuotation.Name</strong></MudText>
        </MudItem>
        <MudItem xs="12" md="6">
            <QuotationAutocomplete @bind-Value="@context.QuotationId" Label="@L["Quotation"]" Disabled="!Context.AddEditModal.IsCreate"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="int" For="@(() => context.Quantity)" @bind-Value="context.Quantity" Label="@L["Quantity"]" />
        </MudItem>
        <MudItem xs="12" md="12">
            <ProductAutocomplete @bind-Value="@context.ProductId" Label="@L["Product"]" Disabled="!Context.AddEditModal.IsCreate"/>
        </MudItem>
    </EditFormContent>

</ProductEntityTable>

<MudContainer Class="d-flex justify-end gap-1">

    <MudSpacer />
    <MudIcon Icon="@Icons.Outlined.Info" Color="Color.Default"/>
    <MudText Color="Color.Default" Typo="Typo.body2"> TIP: You would prefer to set the quantity to zero instead of deleting the product.</MudText>

</MudContainer>

@code
{
    [Parameter] public QuotationDto SelectedQuotation { get; set; } = default!;

    protected EntityServerTableContext<QuotationProductDetailsDto, Guid, UpdateQuotationProductRequest> Context { get; set; } = default!;
    private ProductEntityTable<QuotationProductDetailsDto, Guid, UpdateQuotationProductRequest> _table = default!;
    private MudMessageBox mbox { get; set; } = default!;

    protected override void OnInitialized() =>
    Context = new(
            entityName: L["Products"],
            entityNamePlural: L["Products"],
            entityResource: FSHResource.QuotationProducts,
            fields: new()
            {
                new(qp => qp.Quantity, L["Quantity"], "Quantity"),
                new(qp => qp.Product.UnitType, L["Unit Type"], "Product.UnitType"),
                new(qp => qp.Product.Name, L["Name"], "Product.Name"),
                new(qp => qp.Product.BasePrice, L["Base Price"], "Product.BasePrice"),
                new(qp => qp.Product.Description, L["Description"], "Product.Description"),
            },
            idFunc: qp => qp.QuotationId,

            searchFunc: async filter =>
            {
                var quotationProductFilter = filter.Adapt<SearchQuotationProductsRequest>();

                if (SelectedQuotation.Id != Guid.Empty) quotationProductFilter.QuotationId = SelectedQuotation.Id;
                else quotationProductFilter.QuotationId = null;

                var result = await QuotationProductsClient.SearchAsync(quotationProductFilter);
                return result.Adapt<PaginationResponse<QuotationProductDetailsDto>>();

            },
            createFunc: async qp => await QuotationProductsClient.CreateAsync(qp.Adapt<CreateQuotationProductRequest>()),
            updateFunc: async (id, qp) => await QuotationProductsClient.UpdateAsync(qp.QuotationId, qp.ProductId, qp),
            // deleteFunc: async id => await QuotationProductsClient.DeleteAsync(id),
            exportAction: string.Empty);

}
