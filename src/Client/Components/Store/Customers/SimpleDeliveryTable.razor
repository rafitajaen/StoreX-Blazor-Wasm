@inject IStringLocalizer<SharedResource> L
@inject IDeliveriesClient DeliveriesClient

<MudContainer Class="d-flex align-start gap-2">

    <MudText Typo="Typo.overline"><strong>@L["Deliveries"].ToString().ToUpper()</strong></MudText>

    @if(SelectedProject.Id != Guid.Empty)
    {
        <MudText Typo="Typo.overline">(@L["All deliveries in"] @SelectedProject.Name)</MudText>
    }

</MudContainer>

<EntityTable @ref="_table" TEntity="DeliveryDto" TId="Guid" TRequest="UpdateDeliveryRequest" Context="@Context"
    SelectedItem="@SelectedItem" SelectedItemChanged="@SelectedItemChanged">

    <EditFormContent>
        <MudItem xs="12" md="6">
            <MudCheckBox @bind-Checked="@context.IsCompleted" Label="@L["Is this delivery completed?"]"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCheckBox @bind-Checked="@context.IsSyncWithStock" Label="@L["Is this delivery synced with stock?"]"/>
        </MudItem>
        <MudItem xs="12" md="12">
            <MudText Typo="Typo.body1">@L["You were editing the project:"] <strong>@SelectedProject.Name</strong></MudText>
            <ProjectAutocomplete @bind-Value="@context.ProjectId" Label="@L["Select a Project"]" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="string" For="@(() => context.Name)" @bind-Value="context.Name" Label="@L["Delivery Name"]" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField For="@(() => context.Description)" @bind-Value="context.Description" Label="@L["Delivery Description"]" />
        </MudItem>
    </EditFormContent>

    <ExtraActions>
        <MudMenuItem >@L["Sync With Stock"]</MudMenuItem>
    </ExtraActions>

</EntityTable>

<MudContainer Class="d-flex justify-end gap-1">
    <MudIcon Icon="@Icons.Outlined.Info" Color="Color.Default"/>
    <MudText Color="Color.Default" Typo="Typo.body2"> @L["Click to see products."]</MudText>
</MudContainer>

@code
{
    [Parameter] public ProjectDto SelectedProject { get; set; } = default!;
    [Parameter] public DeliveryDto SelectedItem { get; set; } = default!;
    [Parameter] public EventCallback<DeliveryDto> SelectedItemChanged { get; set; }
    [Parameter] public bool ViewAll { get; set; }

    protected EntityServerTableContext<DeliveryDto, Guid, UpdateDeliveryRequest> Context { get; set; } = default!;
    private EntityTable<DeliveryDto, Guid, UpdateDeliveryRequest> _table = default!;

    protected override void OnInitialized() =>
        Context = new(
            entityName: L["Delivery"],
            entityNamePlural: L["Deliveries"],
            entityResource: FSHResource.Deliveries,
            fields: new()
            {
                new(delivery => delivery.IsCompleted, L["Completed"], "IsCompleted", typeof(bool)),
                new(delivery => delivery.ProjectName, L["Project"], "ProjectName"),
                new(delivery => delivery.Name, L["Name"], "Name"),
                new(delivery => delivery.Description, L["Description"], "Description"),
                new(delivery => delivery.IsSyncWithStock, L["Synced"], "IsSyncWithStock", typeof(bool))
            },
            idFunc: delivery => delivery.Id,
            searchFunc: async filter =>
            {
                var deliveryFilter = filter.Adapt<SearchDeliveriesRequest>();

                if(SelectedProject.Id != Guid.Empty) deliveryFilter.ProjectId = SelectedProject.Id;
                else deliveryFilter.ProjectId = null;

                var result = await DeliveriesClient.SearchAsync(deliveryFilter);

                return result.Adapt<PaginationResponse<DeliveryDto>>();
            },
            createFunc: async delivery => await DeliveriesClient.CreateAsync(delivery.Adapt<CreateDeliveryRequest>()),
            updateFunc: async (id, delivery) => await DeliveriesClient.UpdateAsync(id, delivery),
            deleteFunc: async id => await DeliveriesClient.DeleteAsync(id),
            exportAction: string.Empty);

}