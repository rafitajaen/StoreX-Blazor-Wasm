@inject IStringLocalizer<CustomerEditBox> L
@inject ICustomersClient CustomersClient

<MudMessageBox @ref="mbox" Class="@Class" Style="@Style" CancelText="Cancel" YesText="Confirm">
    <MessageContent>
        <MudGrid>

            @if(isDelete is false)
            {
                <MudItem xs="12" md="6">
                    <MudTextField T="string" For="@(() => contextCustomer.Name)" @bind-Value="contextCustomer.Name" Label="@L["Customer Name"]" />
                </MudItem>
                <MudItem xs="12" md="6">
                        <MudTextField T="string" For="@(() => contextCustomer.Email)" @bind-Value="contextCustomer.Email" Label="@L["Email"]" />
                </MudItem>
                <MudItem xs="12" md="12">
                        <MudTextField T="string" Lines="3" For="@(() => contextCustomer.Description)" @bind-Value="contextCustomer.Description" Label="@L["Description"]" />
                </MudItem>
                <MudItem xs="12" md="6">
                        <MudTextField T="string" For="@(() => contextCustomer.Phone)" @bind-Value="contextCustomer.Phone" Label="@L["Phone"]" />
                </MudItem>
                <MudItem xs="12" md="6">
                        <MudTextField T="string" For="@(() => contextCustomer.WebsiteUrl)" @bind-Value="contextCustomer.WebsiteUrl" Label="@L["Website"]" />
                </MudItem>
                <MudItem xs="12" md="12">
                        <MudTextField T="string" For="@(() => contextCustomer.ImagePath)" @bind-Value="contextCustomer.ImagePath" Label="@L["Profile Image"]" />
                </MudItem>
            }
            else
            {
                <MudItem xs="12" md="12">
                    <MudText Typo="Typo.body1"><strong>@SelectedCustomer.Name</strong> is going to be deleted. Are you sure?</MudText>
                </MudItem>
            }
            </MudGrid>

    </MessageContent>
</MudMessageBox>


@code
{
    [Parameter]    public string? Class { get; set; }
    [Parameter]    public string? Style { get; set; }
    [Parameter]    public CustomerDto SelectedCustomer { get; set; } = default!;
    [Parameter]    public EventCallback<CustomerDto> OnCreatedCustomer { get; set; }

    // MudBox
    private MudMessageBox mbox { get; set; } = default!;
    private CustomerDto contextCustomer { get; set; } = default!;
    private bool isDelete { get; set; } = false;

    public async Task OnCreate()
    {
        #pragma warning disable BL0005
        mbox.Title = @L["Create a Customer"];
        #pragma warning restore BL0005
        contextCustomer = new CustomerDto();

        bool? result = await mbox.Show();

        if(result is not null && result is true)
        {
            contextCustomer.Id = await CustomersClient.CreateAsync(contextCustomer.Adapt<CreateCustomerRequest>());
            await OnCreatedCustomer.InvokeAsync(contextCustomer);
        }
    }

    public async Task OnEdit()
    {
        #pragma warning disable BL0005
        mbox.Title = @L["Edit a Customer"];
        #pragma warning restore BL0005
        contextCustomer = SelectedCustomer;

        bool? result = await mbox.Show();

        if(result is not null && result is true)
        {
            await CustomersClient.UpdateAsync(SelectedCustomer.Id, contextCustomer.Adapt<UpdateCustomerRequest>());
        }
    }

    public async Task OnDelete()
    {
        #pragma warning disable BL0005
        mbox.Title = @L["Delete a Customer"];
        #pragma warning restore BL0005
        isDelete = true;

        bool? result = await mbox.Show();

        if(result is not null && result is true)
        {
            await CustomersClient.DeleteAsync(SelectedCustomer.Id);
            await OnCreatedCustomer.InvokeAsync(contextCustomer);
        }
    }
}