@inject IStringLocalizer<SharedResource> L
@inject IOrdersClient OrdersClient

<MudContainer Class="d-flex align-start gap-2">
    <MudText Typo="Typo.overline"><strong>@L["Orders"].ToString().ToUpper()</strong></MudText>
    @if(SelectedSupplier.Id != Guid.Empty)
    {
        <MudText Typo="Typo.overline"><strong>@L["OF"] @SelectedSupplier.Name.ToUpper()</strong></MudText>
    }
</MudContainer>

<EntityTable @ref="_table" TEntity="OrderDto" TId="Guid" TRequest="UpdateOrderRequest" Context="@Context"
    SelectedItem="@SelectedItem" SelectedItemChanged="@SelectedItemChanged">

    <EditFormContent>
        <MudItem xs="12" md="6">
            <MudCheckBox @bind-Checked="@context.IsCompleted" Label="@L["Completed"]"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCheckBox @bind-Checked="@context.IsSyncWithStock" Disabled="true" Label="@L["Synced With Stock"]"/>
        </MudItem>
        <MudItem xs="12" md="12">
            <SupplierAutocomplete @bind-Value="@context.SupplierId" Label="@L["Supplier"]"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="string" For="@(() => context.Name)" @bind-Value="context.Name" Label="@L["Provider Name"]" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField For="@(() => context.Description)" @bind-Value="context.Description"
                Label="@L["Description"]" />
        </MudItem>
    </EditFormContent>

    <ExtraActions>
        <MudMenuItem >@L["Sync With Stock"]</MudMenuItem>
    </ExtraActions>

</EntityTable>

<MudContainer Class="d-flex justify-end gap-1">
    <MudIcon Icon="@Icons.Outlined.Info" Color="Color.Default"/>
    <MudText Color="Color.Default" Typo="Typo.body2"> @L["Click to see details."]</MudText>
</MudContainer>

@code
{
    [Parameter] public SupplierDto SelectedSupplier { get; set; } = default!;
    [Parameter] public OrderDto SelectedItem { get; set; } = default!;
    [Parameter] public EventCallback<OrderDto> SelectedItemChanged { get; set; }
    [Parameter] public bool ViewAll { get; set; }

    protected EntityServerTableContext<OrderDto, Guid, UpdateOrderRequest> Context { get; set; } = default!;
    private EntityTable<OrderDto, Guid, UpdateOrderRequest> _table = default!;

    protected override void OnInitialized() =>
        Context = new(
            entityName: L["Order"],
            entityNamePlural: L["Orders"],
            entityResource: FSHResource.Orders,
            fields: new()
            {
                new(order => order.IsCompleted, L["Completed"], "Completed", typeof(bool)),
                new(order => order.SupplierName, L["Supplier"], "Supplier.Name"),
                new(order => order.Name, L["Name"], "Name"),
                new(order => order.Description, L["Description"], "Description"),
                new(order => order.IsSyncWithStock, L["Synced"], "Synced", typeof(bool)),
            },
            idFunc: order => order.Id,
            searchFunc: async filter =>
            {
                var orderFilter = filter.Adapt<SearchOrdersRequest>();

                if(SelectedSupplier.Id != Guid.Empty) orderFilter.SupplierId = SelectedSupplier.Id;
                else orderFilter.SupplierId = null;

                var result = await OrdersClient.SearchAsync(orderFilter);

                return result.Adapt<PaginationResponse<OrderDto>>();
            },
            createFunc: async order => await OrdersClient.CreateAsync(order.Adapt<CreateOrderRequest>()),
            updateFunc: async (id, order) => await OrdersClient.UpdateAsync(id, order),
            deleteFunc: async id => await OrdersClient.DeleteAsync(id),
            exportAction: string.Empty);

}