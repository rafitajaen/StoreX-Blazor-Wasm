@inject IStringLocalizer<SharedResource> L
@inject IOrderProductsClient OrderProductsClient

<MudContainer Class="d-flex align-start gap-1">

    <MudText Typo="Typo.overline"><strong>@L["Products"].ToString().ToUpper()</strong></MudText>
    @if(SelectedOrder.Id != Guid.Empty)
    {
        <MudText Typo="Typo.overline"><strong>@L["IN"] @SelectedOrder.Name.ToUpper()</strong></MudText>
        <MudSpacer />
    }

</MudContainer>

<ProductEntityTable @ref="_table" TEntity="OrderProductDetailsDto" TId="Guid" TRequest="UpdateOrderProductRequest" Context="@Context"
    CustomDeleteFunc="@(async (orderId, productId) => await OrderProductsClient.DeleteAsync(orderId, productId))"
    OrderIdFunc="@((op) => op.OrderId)" ProductIdFunc="@((op) => op.Product.Id)">

    <EditFormContent>
        <MudItem xs="12" md="12">
            <MudText Typo="Typo.body1">@L["You were editing the order:"] <strong>@SelectedOrder.Name</strong></MudText>
        </MudItem>
        <MudItem xs="12" md="6">
            <OrderAutocomplete @bind-Value="@context.OrderId" Label="@L["Order"]" Disabled="!Context.AddEditModal.IsCreate"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField T="int" For="@(() => context.Quantity)" @bind-Value="context.Quantity" Label="@L["Quantity"]" />
        </MudItem>
        <MudItem xs="12" md="12">
            <ProductAutocomplete @bind-Value="@context.ProductId" Label="@L["Product"]" Disabled="!Context.AddEditModal.IsCreate"/>
        </MudItem>
    </EditFormContent>

</ProductEntityTable>

<MudContainer Class="d-flex justify-end gap-1">

    <MudSpacer />
    <MudIcon Icon="@Icons.Outlined.Info" Color="Color.Default"/>
    <MudText Color="Color.Default" Typo="Typo.body2"> @L["TIP: You would prefer to set the quantity to zero instead of deleting the product."]</MudText>

</MudContainer>

@code
{
    [Parameter] public OrderDto SelectedOrder { get; set; } = default!;

    protected EntityServerTableContext<OrderProductDetailsDto, Guid, UpdateOrderProductRequest> Context { get; set; } = default!;
    private ProductEntityTable<OrderProductDetailsDto, Guid, UpdateOrderProductRequest> _table = default!;
    private MudMessageBox mbox { get; set; } = default!;

    protected override void OnInitialized() =>
    Context = new(
            entityName: L["Products"],
            entityNamePlural: L["Products"],
            entityResource: FSHResource.OrderProducts,
            fields: new()
            {
                new(op => op.Quantity, L["Quantity"], "Quantity"),
                new(op => op.Product.UnitType, L["Unit Type"], "Product.UnitType"),
                new(op => op.Product.Name, L["Name"], "Product.Name"),
                new(op => op.Product.BasePrice, L["Base Price"], "Product.BasePrice"),
                new(op => op.Product.Description, L["Description"], "Product.Description"),
            },
            idFunc: op => op.OrderId,

            searchFunc: async filter =>
            {
                var orderProductFilter = filter.Adapt<SearchOrderProductsRequest>();

                if (SelectedOrder.Id != Guid.Empty) orderProductFilter.OrderId = SelectedOrder.Id;
                else orderProductFilter.OrderId = null;

                var result = await OrderProductsClient.SearchAsync(orderProductFilter);
                return result.Adapt<PaginationResponse<OrderProductDetailsDto>>();

            },
            createFunc: async op => await OrderProductsClient.CreateAsync(op.Adapt<CreateOrderProductRequest>()),
            updateFunc: async (id, op) => await OrderProductsClient.UpdateAsync(op.OrderId, op.ProductId, op),
            // deleteFunc: async id => await OrderProductsClient.DeleteAsync(id),
            exportAction: string.Empty);

}
